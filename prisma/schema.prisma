generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  clerkId   String     @unique
  email     String     @unique
  firstName String?
  lastName  String?
  imageUrl  String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  campaigns Campaign[]
  comments  Comment[]
  votes     Vote[]

  @@map("users")
}

model Campaign {
  id          String         @id @default(cuid())
  title       String
  description String
  status      CampaignStatus @default(DRAFT)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // PostGIS spatial data - SRID 4326 (WGS84 for GPS coordinates)
  location Unsupported("geometry(POINT, 4326)")?

  // Keep legacy fields for backward compatibility and ease of use
  latitude  Float?
  longitude Float?
  address   String?
  city      String?
  state     String?
  zipCode   String?
  county    String?

  // Geographic metadata
  geohash  String? // For quick spatial indexing
  timezone String? // Local timezone for the campaign location

  // Relationships  
  districts CampaignDistrict[] // Many-to-many with districts

  creatorId String
  creator   User      @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  comments  Comment[]
  votes     Vote[]

  // Spatial index for performance
  @@index([latitude, longitude])
  @@map("campaigns")
}

model Comment {
  id         String   @id @default(cuid())
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  campaignId String
  authorId   String
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Vote {
  id         String   @id @default(cuid())
  type       VoteType
  createdAt  DateTime @default(now())
  campaignId String
  userId     String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([campaignId, userId])
  @@map("votes")
}

model District {
  id    String        @id @default(cuid())
  name  String // e.g., "Downtown", "Ward 3", "City Council District 5"
  type  DistrictType // Municipal boundary type
  level DistrictLevel // City, county, state, federal

  // PostGIS geometry for district boundaries (polygons/multipolygons)
  boundary Unsupported("geometry(MULTIPOLYGON, 4326)")?

  // Metadata
  population  Int? // Census data
  area        Float? // Square kilometers
  description String? // Additional district info

  // Geographic identifiers
  city     String?
  state    String
  county   String?
  zipCodes String[] // Array of zip codes in this district

  // Relationships
  campaigns CampaignDistrict[] // Many-to-many with campaigns

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("districts")
}

// Junction table for campaign-district relationships
model CampaignDistrict {
  id         String   @id @default(cuid())
  campaignId String
  districtId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  district   District @relation(fields: [districtId], references: [id], onDelete: Cascade)

  // Spatial relationship type
  relationship DistrictRelationship @default(WITHIN)

  @@unique([campaignId, districtId])
  @@map("campaign_districts")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELLED
}

enum VoteType {
  SUPPORT
  OPPOSE
}

enum DistrictType {
  CITY_COUNCIL // City council districts
  WARD // Municipal wards
  NEIGHBORHOOD // Neighborhood associations
  SCHOOL_DISTRICT // School district boundaries
  COUNTY // County boundaries
  STATE_HOUSE // State house districts
  STATE_SENATE // State senate districts
  CONGRESSIONAL // Federal congressional districts
  PLANNING_ZONE // Urban planning zones
  VOTING_PRECINCT // Voting precincts
}

enum DistrictLevel {
  NEIGHBORHOOD // Hyperlocal (HOAs, neighborhood groups)
  MUNICIPAL // City-level districts  
  COUNTY // County-level
  STATE // State-level districts
  FEDERAL // Federal districts
}

enum DistrictRelationship {
  WITHIN // Campaign is entirely within the district
  INTERSECTS // Campaign location intersects district boundary
  NEARBY // Campaign is near but outside district
  AFFECTS // Campaign may affect district (manually assigned)
}
