generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  clerkId   String     @unique
  email     String     @unique
  firstName String?
  lastName  String?
  imageUrl  String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  campaigns Campaign[]
  comments  Comment[]
  votes     Vote[]

  // Performance indexes for user queries
  @@index([createdAt(sort: Desc)]) // Recent user registrations
  @@index([updatedAt(sort: Desc)]) // Recently active users
  @@index([firstName, lastName]) // Name-based user search
  @@map("users")
}

model Campaign {
  id          String                   @id @default(cuid())
  title       String
  description String
  status      CampaignStatus           @default(DRAFT)
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  latitude    Float?
  longitude   Float?
  address     String?
  city        String?
  state       String?
  zipCode     String?
  creatorId   String
  county      String?
  geohash     String?
  timezone    String?
  districts   CampaignDistrict[]
  creator     User                     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  comments    Comment[]
  votes       Vote[]

  // Performance-optimized indexes for common queries
  @@index([latitude, longitude]) // Existing geo index
  @@index([status, createdAt(sort: Desc)]) // Status filtering with recency
  @@index([creatorId, status]) // User's campaigns by status
  @@index([city, status]) // City-based filtering
  @@index([state, city, status]) // Hierarchical location filtering
  @@index([createdAt(sort: Desc)]) // Recent campaigns
  @@index([updatedAt(sort: Desc)]) // Recently updated campaigns
  @@index([status, updatedAt(sort: Desc)]) // Active campaigns by update time
  @@index([geohash]) // Geohash-based spatial lookups
  @@index([title]) // Title search optimization
  @@map("campaigns")
}

model Comment {
  id         String   @id @default(cuid())
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  campaignId String
  authorId   String
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  // Performance indexes for comment queries
  @@index([campaignId, createdAt(sort: Desc)]) // Campaign comments by recency
  @@index([authorId, createdAt(sort: Desc)]) // User's comments by recency
  @@index([createdAt(sort: Desc)]) // Recent comments across platform
  @@map("comments")
}

model Vote {
  id         String   @id @default(cuid())
  type       VoteType
  createdAt  DateTime @default(now())
  campaignId String
  userId     String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([campaignId, userId])
  // Performance indexes for vote aggregation and analysis
  @@index([campaignId, type]) // Vote counts by type per campaign
  @@index([userId, createdAt(sort: Desc)]) // User's voting history
  @@index([type, createdAt(sort: Desc)]) // Platform-wide vote trends
  @@index([campaignId, createdAt(sort: Desc)]) // Campaign vote timeline
  @@map("votes")
}

model District {
  id          String                   @id @default(cuid())
  name        String
  type        DistrictType
  level       DistrictLevel
  // boundary    Unsupported("geometry")? // Commented out until PostGIS is enabled
  population  Int?
  area        Float?
  description String?
  city        String?
  state       String
  county      String?
  zipCodes    String[]
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  campaigns   CampaignDistrict[]

  // Performance indexes for district queries
  @@index([state, type]) // Districts by state and type
  @@index([city, state]) // City-level district lookup
  @@index([type, level]) // District classification queries
  @@index([state, level, type]) // Hierarchical district navigation
  @@map("districts")
}

model CampaignDistrict {
  id           String               @id @default(cuid())
  campaignId   String
  districtId   String
  relationship DistrictRelationship @default(WITHIN)
  campaign     Campaign             @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  district     District             @relation(fields: [districtId], references: [id], onDelete: Cascade)

  @@unique([campaignId, districtId])
  // Performance indexes for campaign-district relationships
  @@index([campaignId, relationship]) // Campaign's district relationships
  @@index([districtId, relationship]) // District's campaign relationships
  @@map("campaign_districts")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELLED
}

enum VoteType {
  SUPPORT
  OPPOSE
}

enum DistrictType {
  CITY_COUNCIL
  WARD
  NEIGHBORHOOD
  SCHOOL_DISTRICT
  COUNTY
  STATE_HOUSE
  STATE_SENATE
  CONGRESSIONAL
  PLANNING_ZONE
  VOTING_PRECINCT
}

enum DistrictLevel {
  NEIGHBORHOOD
  MUNICIPAL
  COUNTY
  STATE
  FEDERAL
}

enum DistrictRelationship {
  WITHIN
  INTERSECTS
  NEARBY
  AFFECTS
}
