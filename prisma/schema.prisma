generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  firstName         String?
  lastName          String?
  email             String   @unique
  imageUrl          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relationships
  campaigns         Campaign[]
  votes             Vote[]
  comments          Comment[]
  pushSubscriptions PushSubscription[]

  // Performance indexes for user queries
  @@index([createdAt])
  @@index([updatedAt])
  @@index([firstName, lastName])
  @@map("users")
}

model Campaign {
  id          String        @id @default(cuid())
  title       String
  description String
  status      CampaignStatus @default(DRAFT)
  
  // Location data
  latitude    Float?
  longitude   Float?
  address     String?
  city        String?
  state       String?
  zipCode     String?
  geohash     String?
  
  // Media
  imageUrl    String?
  
  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creatorId   String
  
  // Relationships
  creator     User       @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  votes       Vote[]
  comments    Comment[]
  districts   CampaignDistrict[]

  // Performance-optimized indexes for common queries
  @@index([status, createdAt])
  @@index([creatorId, status])
  @@index([city, status])
  @@index([state, city, status])
  @@index([geohash])
  @@index([title])
  @@index([latitude, longitude])
  @@index([createdAt])
  @@index([updatedAt])
  @@map("campaigns")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  campaignId String
  authorId   String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  // Performance indexes for comment queries
  @@index([campaignId, createdAt])
  @@index([authorId, createdAt])
  @@index([createdAt])
  @@map("comments")
}

model Vote {
  id         String   @id @default(cuid())
  type       VoteType
  createdAt  DateTime @default(now())
  
  // Relationships
  campaignId String
  userId     String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([campaignId, userId])
  // Performance indexes for vote aggregation and analysis
  @@index([campaignId, type])
  @@index([userId, createdAt])
  @@index([type, createdAt])
  @@index([createdAt])
  @@map("votes")
}

model District {
  id       String   @id @default(cuid())
  name     String
  type     DistrictType
  state    String?
  
  // Geographic data
  boundary Json?    // GeoJSON polygon
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  campaigns CampaignDistrict[]

  // Performance indexes for district queries
  @@index([state, type])
  @@index([type])
  @@map("districts")
}

model CampaignDistrict {
  id         String   @id @default(cuid())
  campaignId String
  districtId String
  
  // Relationships
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  district   District @relation(fields: [districtId], references: [id], onDelete: Cascade)
  
  @@unique([campaignId, districtId])
  // Performance indexes for campaign-district relationships
  @@index([campaignId])
  @@index([districtId])
  @@map("campaign_districts")
}

model PushSubscription {
  id               String   @id @default(cuid())
  userId           String
  endpoint         String
  p256dh           String?
  auth             String?
  userAgent        String?
  subscriptionData String?  // JSON string of full subscription object
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  lastUpdated      DateTime @updatedAt
  
  // Relationships
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, endpoint])
  @@index([userId])
  @@index([isActive])
  @@index([createdAt])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELLED
}

enum VoteType {
  SUPPORT
  OPPOSE
}

enum DistrictType {
  CONGRESSIONAL
  STATE_SENATE
  STATE_HOUSE
  COUNTY
  CITY
  SCHOOL
}
