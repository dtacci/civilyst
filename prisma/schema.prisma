// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  firstName String?
  lastName  String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  campaigns Campaign[]
  comments  Comment[]
  votes     Vote[]

  @@map("users")
}

model Campaign {
  id          String   @id @default(cuid())
  title       String
  description String
  status      CampaignStatus @default(DRAFT)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Location data for PostGIS
  latitude    Float?
  longitude   Float?
  address     String?
  city        String?
  state       String?
  zipCode     String?

  // User relation
  creatorId   String
  creator     User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  // Relations
  comments    Comment[]
  votes       Vote[]

  @@map("campaigns")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  
  authorId   String
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Vote {
  id        String   @id @default(cuid())
  type      VoteType
  createdAt DateTime @default(now())

  // Relations
  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Ensure one vote per user per campaign
  @@unique([campaignId, userId])
  @@map("votes")
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELLED
}

enum VoteType {
  SUPPORT
  OPPOSE
}
